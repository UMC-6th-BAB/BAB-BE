name: BabEDeuk Publish
on:
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{github.repository}}
  EC2_SSH_USER : ubuntu
  EC2_HOST : ${{ secrets.EC2_HOST}}
  EC2_PRIVATE_KEY : ${{ secrets.EC2_SSH_PRIVATE_KEY}}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:

      # jdk 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      #서브 모듈 접근
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true

      # 서브 모듈 변경 점 있으면 update
      - name: Git Submodule Update
        run: |
          git submodule update --remote --recursive

      # docker hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      # 이미지의 metadata 추출
      - name: Extract metadata (tags, labels) for Docker
        uses: docker/metadata-action@v4
        with:
          images: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}

      # 프로젝트 build에 필요한 과정
      - name: Grant execute permission for gradlew
        run : |
          chmod +x gradlew
          ./gradlew clean build -x test

      # gcs-key.json 생성
      - name: Create gcs-key.json
        run: echo "${{ secrets.GCS_KEY_JSON }}" > gcs-key.json

      # Docker Hub에 올리기
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bab-e-deuk
          labels: ${{steps.meta.outputs.labels}}

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.EC2_PRIVATE_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bab-e-deuk
            sudo docker run -dp 8080:8080 --name babedeuck ${{ secrets.DOCKERHUB_USERNAME }}/bab-e-deuk:latest
